class Screen{
    static int current_color;static Array screen;static Array twoToThe;
      /** Initializes the Screen. */
        function void init() {
          let screen=16384;
          let current_color=1;
          do Screen.help();
          return;
        }

        /** Erases the entire screen. */
        function void clearScreen() {
         var int x;
         while(x<8192){
            let screen[x]=0;
            let x=x+1;
         }
        return;}
        /** Sets the current color, to be used for all subsequent drawXXX commands.
         *  Black is represented by true, white by false. */
        function void setColor(boolean b) {
           if(b){
            let current_color=1;}
            else{
            let current_color=0;}
            return;
        }
        /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
        function void drawLine(int x1, int y1, int x2, int y2) {
            var int tempx,tempy,a,b,dx,dy,diff;
            //if the two pixels are the same
            if((x1=x2)&(y1=y2)){do Screen.drawPixel(x1,y1);}
            //make the bottom pixel is (x1,y1) and it is too the left pixel in case the two pixels are on straight line.
            if((y2>y1)|((y2=y1)&(x1>x2))){
                let tempx=x1;
                let x1=x2;
                let tempy=y1;
                let y1=y2;
                let x2=tempx;
                let y2=tempy;
            }

            //if it is straight up line
            if((x1=x2)& (y1>y2)){
               while((y1+b>y2)| (y1+b=y2)){
                   do Screen.drawPixel(x1,y1+b);
                   let b=b-1;
               }
               return;
            }
            //if it is straight right line
            if(y1=y2){
                while((x1+a<x2)| (x1+a=x2)){
                    do Screen.drawPixel(x1+a,y1);
                    let a=a+1;
                }
              return;
            }
            //if (x2,y2) is up and right to (x1,y1)
                let dy=y1-y2;
                if(x2>x1){
                    let dx=x1-x2;
                    while (((x1+a<x2) |(x1+a=x2))& ((y1+b>y2) |(y1+b=y2))){
                        do Screen.drawPixel(x1+a,y1+b);
                         if((diff>0)|(diff=0))
                            {
                                 let a=a+1;let diff=diff-dy;
                            }
                         else
                            {let b=b-1;let diff=diff-dx;}
                    }
                    return;
                }
                //if (x2,y2) is up and left to (x1,y1)
                let dx=x2-x1;
                if(x2<x1){
                    while (((x1+a>x2) |(x1+a=x2))& ((y1+b>y2) |(y1+b=y2))){
                        do Screen.drawPixel(x1+a,y1+b);
                         if((diff>0)|(diff=0))
                            {
                                let a=a-1;let diff=diff+dy;
                            }
                         else
                            {let b=b-1;let diff=diff-dx;}
                    }

                }

            return;
        }

        /** Draws a filled rectangle whose top left corner is (x1, y1)
         * and bottom right corner is (x2,y2), using the current color. */
        function void drawRectangle(int x1, int y1, int x2, int y2) {
           var int b;
           while((y1+b<y2) | (y1+b=y2)){
              do Screen.drawLine(x1,y1+b,x2,y1+b);
              let b=b+1;
            }
            return;
        }

        /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
        function void drawCircle(int x, int y, int r) {
              var int dy;
              if(r>181 | r<0){return;}
              let dy=-r;

              while((dy<r) |(dy=r) ){
                do Screen.drawLine(x-Math.sqrt((r*r)-(dy*dy)),y+dy,x+Math.sqrt((r*r)-(dy*dy)),y+dy);
                let dy=dy+1;
              }


         return;
        }
        function void help() {
             let twoToThe = Array.new(16);
             let twoToThe[0] = 1;
             let twoToThe[1] = 2;
             let twoToThe[2] = 4;
             let twoToThe[3] = 8;
             let twoToThe[4] = 16;
             let twoToThe[5] = 32;
             let twoToThe[6] = 64;
             let twoToThe[7] = 128;
             let twoToThe[8] = 256;
             let twoToThe[9] = 512;
             let twoToThe[10] = 1024;
             let twoToThe[11] = 2048;
             let twoToThe[12] = 4096;
             let twoToThe[13] = 8192;
             let twoToThe[14] = 16384;
             let twoToThe[15] = -(32767+1);
             return;
         }

 function int two_to_the(int power) {
   return twoToThe[power];
 }

        /** Draws the (x,y) pixel, using the current color. */
        function void drawPixel(int x,int y){
            var int address,modulo,word,mask,i;
            let address=(32*y)+(x/16);
            let modulo = x - (x / 16 * 16);
            let word=Memory.peek(16384+address);

            if (current_color=1) {
        			let screen[address] = word | twoToThe[modulo];
        		}
        		else {
            while(i<15){
            if(~(i=modulo))
              {let  mask=mask+twoToThe[i];}
               let i=i+1;
            }
        			let screen[address] = screen[address] & mask;
            }
            return;
       }
}
